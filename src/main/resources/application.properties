spring.application.name=notify-service-api

## OpenTelemetry
### https://github.com/spring-projects/spring-boot/issues/41460#issuecomment-2399968462
management.opentelemetry.resource-attributes.application=${spring.application.name}
management.tracing.sampling.probability=1.0
management.otlp.tracing.endpoint=http://localhost:4317/v1/traces
management.otlp.tracing.export.enabled=true
management.otlp.tracing.transport=grpc

management.otlp.metrics.export.enabled=true
management.otlp.metrics.export.url=http://localhost:4318/v1/metrics
management.otlp.metrics.export.step=5s
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.instance=${notify.env}

management.otlp.logging.export.enabled=true
management.otlp.logging.transport=grpc
management.otlp.logging.endpoint=http://localhost:4317/v1/logs

## Mail
spring.mail.host=localhost
spring.mail.port=1025

## TestContainers
spring.testcontainers.beans.startup=parallel
### Support for injecting a DynamicPropertyRegistry into @Bean methods is deprecated. Register 'spring.mail.host' using a DynamicPropertyRegistrar bean instead. Alternatively, set spring.testcontainers.dynamic-property-registry-injection to 'warn' to replace this failure with a warning or to 'allow' to permit injection of the registry.
spring.testcontainers.dynamic-property-registry-injection=warn

## Virtual Thread
spring.threads.virtual.enabled=true

## Docker Compose Support
spring.docker.compose.enabled=false
spring.docker.compose.lifecycle-management=start-and-stop
spring.docker.compose.stop.command=stop
spring.docker.compose.start.command=up
spring.docker.compose.file=compose.yml

## Problem Details - Erros Response (RFC 9457)
spring.mvc.problemdetails.enabled=true

## Application
notify.smtp.from=contact@nzuguem.me
notify.sms.from=999
notify.env=dev
notify.goff.url=http://localhost:1031
### Injecting configuration from Maven
notify.jte.packageName=@me.nzuguem.notify.jte.packageName@

## Datasource
spring.datasource.url=jdbc:postgresql://localhost:5432/customers
spring.datasource.username=customer
spring.datasource.password=customer

## Actuator
management.endpoints.web.base-path=/manage
management.server.port=9090
management.endpoints.web.exposure.include=health,metrics,sbom,prometheus,env-infos
management.endpoint.health.show-details=always

## Graceful Shutdown
## https://docs.spring.io/spring-boot/reference/web/graceful-shutdown.html
spring.lifecycle.timeout-per-shutdown-phase=30s
server.shutdown=graceful

## AMQP - RabbitMQ
spring.rabbitmq.password=secret
spring.rabbitmq.username=myuser
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.listener.simple.retry.enabled=true
spring.rabbitmq.listener.simple.retry.initial-interval=3s
spring.rabbitmq.listener.simple.retry.max-attempts=3
spring.rabbitmq.listener.simple.retry.max-interval=10s
spring.rabbitmq.listener.simple.retry.multiplier=2

## Flexy Pool
### Enable logging and publishing ConnectionAcquisitionTimeThresholdExceededEvent when a connection acquisition request has timed out
decorator.datasource.flexy-pool.threshold.connection.acquisition=-1
### Enable logging and publishing ConnectionLeaseTimeThresholdExceededEvent when a connection lease has exceeded the given time threshold
decorator.datasource.flexy-pool.threshold.connection.lease=0
